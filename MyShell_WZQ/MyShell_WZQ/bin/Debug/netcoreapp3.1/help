****MiniShell简明用户手册*********
*********作者：WZQ***************
*********版本：1.0.0***************
***********************************
1.基本输入格式（无重定向或管道）：
[指令] [选项] [参数]

注意：以上三种均应以空格隔开！
***********************************
2.重定向的输入格式：
[指令] [选项] [参数] < inputFile > outputFile

同时，输出重定向符号可以由>替换为>>，后者代表在outputFile的文件后追加，前者则为直接覆盖；
当outputFile不存在时，会直接创建；
同时输出重定向和输入重新向的前后顺序并不影响程序，即输入格式可以为：
[指令] [选项] [参数]  > outputFile < inputFile
注意：重定向符号前后请以空格隔开！
注意：内部指令均不支持重定向，因此如果对内部指令进行重定向，会产生报错；
**********************************
3.管道的输入格式：
[指令1] [选项] [参数] | [指令2] [选项] [参数] | …… | [指令n] [选项] [参数]

如上方示例所示，MiniShell可以支持复数个管道符号；
MiniShell管道的原理是通过C#中的StreamReader不断将上一个指令的输出传递到下一个指令，
因此，对于没有输出的指令，将传递null到下一个指令的输入，
没有输入的指令，也不会接收来自上一条指令的输入，
因此在使用管道时需要注意这一点，以避免不可预测的结果的产生
注意：管道符号前后请均以空格隔开！
注意：当使用管道时，重定向功能是不兼容的
**********************************
4.从文件中提取命令行输入
按照如下格式进行输入：
myshell  [文件相对于PWD（即当前目录位置）的地址]

通过该指令可以实现对特定脚本文件的指令的处理
注意：该命令不支持管道或重定向
**********************************
5. 部分特殊指令：
MiniShell的指令实现都是按照标准的bash shell指令来进行，
因此指令的含义与标准的基本一致，这里单独说明一些和标准指令作用并不一致的指令；

5.1 set指令
通过set指令可以创建一个临时变量，指令格式如下
set [变量名] = [变量值]
其中，变量名与变量值内不能含有空格；
并且赋值号"="前后均应有空格
在创建一个变量后可以通过$引用它，
带有$标记的符号会在指令执行前转换为其对应的变量值，
如果不存在该变量值则会报错；




